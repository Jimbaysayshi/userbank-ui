{"version":3,"sources":["components/Login.js","components/UserFunctions.js","components/Register.js","components/Programs.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","state","username","masterkey","id","msg","onChange","bind","onSubmit","e","this","setState","target","name","value","length","preventDefault","user","axios","post","headers","credentials","then","res","localStorage","setItem","data","token","Cookie","set","refresh_token","catch","err","console","log","login","props","history","push","className","noValidate","FormGroup","controlId","bsSize","FormLabel","FormControl","type","Button","block","disabled","validateForm","to","alertMessage","Component","RegisterForm","masterkey_re","errMsg","newUser","register","ProgramsList","resetFormState","formState","program","password","password_re","mode","idx","programList","querySelector","index","len","credentialSet","addCredentials","updating","find","item","findIndex","p","updateCredentials","key","deleteCredentials","removed","splice","removeProgram","getItem","userID","config","Authorization","remove","authorizationCheck","responseData","status","logOut","makeChanges","getToken","user_id","change","get","programs","error","response","removeItem","pathname","title","onClick","titleChange","Table","map","text","Field","label","htmlFor","Form","App","style","color","exact","path","component","Login","Register","Programs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.e121faf7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button, FormGroup, FormLabel, FormControl} from \"react-bootstrap\"\nimport { login } from './UserFunctions'\nimport { Link } from 'react-router-dom'\nimport \"./Login.css\"\n\nclass LoginForm extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: '',\n            masterkey :'',\n            id: '',\n            msg: \"Login with an existing account or register a new one\",\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    } \n\n    onChange(e){\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    validateForm() {\n        return this.state.username.length > 0 && this.state.masterkey.length > 0;\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const user = {\n            username: this.state.username,\n            masterkey: this.state.masterkey\n        }\n        login(user).then(res => {\n            \n            if(!res.data.err) {\n                \n                this.props.history.push('/programs')\n            } else{\n                this.setState({msg: res.data.err})\n                \n            }     \n        })\n    }\n\n    alertMessage(){\n        return this.state.msg\n    }\n\n    render(){\n        return(\n            <div className=\"Login\">\n                <div className=\"title2\">\n                    <h1>LOGIN</h1>\n                </div>\n                <form noValidate onSubmit={this.onSubmit}>\n                    <FormGroup controlId=\"username\" bsSize=\"large\">\n                        <FormLabel>Username</FormLabel>\n                        <FormControl\n                            type=\"username\"\n                            name=\"username\"\n                            value={this.state.username}\n                            onChange={this.onChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"masterkey\" bsSize=\"large\">\n                        <FormLabel>Masterkey</FormLabel>\n                        <FormControl\n                            type=\"password\"\n                            name=\"masterkey\"\n                            value={this.state.masterkey}\n                            onChange={this.onChange}\n                        />\n                    </FormGroup>\n                    <div className=\"button-group\">\n                        <Button className=\"login-btn\" block bsSize=\"large\" disabled={!this.validateForm()} type=\"submit\">\n                            Login\n                        </Button>\n                        or\n                        <Link to=\"/register\">\n                            <Button className=\"register-btn\" block bsSize=\"large\">\n                                Register\n                            </Button>\n                        </Link>\n                    </div>\n                </form>\n                <div>\n                    <p className=\"alert-msg\">{this.alertMessage()}</p>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default LoginForm;","import axios from 'axios'\nimport Cookie from 'js-cookie'\n\n\nexport const register = newUser => {\n    \n    return axios\n        .post('/signup',{\n            username: newUser.username,\n            masterkey: newUser.masterkey\n        })\n        .then(res => {\n            return res\n        })\n        .catch(err =>{\n            console.log(err)\n        })\n\n}\n\nexport const logout = user => {\n    const userID = localStorage.getItem('id')\n    return axios \n        .post('/logout', {\n            username: user.username,\n            id: userID\n        })\n        .then(res => {\n            return res\n        })\n        .catch(err => {\n            console.log(err)\n        })\n}\n\nexport const login = user => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n        },\n        credentials: 'include',}    \n\n    return axios\n\n        .post('/login', {\n            username: user.username,\n            masterkey: user.masterkey\n            }, config)\n        .then(res => {\n            localStorage.setItem('jwt-token', res.data.token)\n            localStorage.setItem('id', res.data.id)\n            Cookie.set(\"token\", res.data.token, {'expires': 10})\n            Cookie.set(\"refresh_token\", res.data.refresh_token, {'expires': 60})\n            return res\n        })\n        .catch (err => {\n            console.log(err)\n        })\n}\n\nexport const credentials = credentialSet => {\n    const token = localStorage.getItem('jwt-token');\n    const config = {\n        headers: { Authorization: `Bearer ${token}` }\n    };\n    const userID = localStorage.getItem('id')\n    return axios\n     \n        .post('/add-program', {\n            program: credentialSet.program,\n            username: credentialSet.username,\n            password: credentialSet.password,\n            index: credentialSet.index,\n            id: userID,\n            },config)\n        .then(res => {\n            return res\n        })\n        .catch (err => {\n            console.log(err)\n        })\n}\n\n\nexport const remove = removeProgram => {\n    const token = localStorage.getItem('jwt-token');\n    const userID = localStorage.getItem('id')\n    const config = {\n        headers: { Authorization: `Bearer ${token}` }\n    };\n    return axios\n     \n        .post('/remove-program', {\n            program: removeProgram.program,\n            username: removeProgram.username,\n            id: userID,\n            }, config)\n        .then(res => {\n\n            return res\n        })\n        .catch (err => {\n            console.log(err)\n        })\n}\n\n\nexport const programs = token => {\n    const config = {\n        headers: { Authorization: `Bearer ${token}` },\n    }\n\n    return axios\n        .get('/programs', config)\n        .then(res => {\n            return res\n        })\n        //.catch(error => {\n        //    console.log('error')\n        //    console.log(error.response)\n        //})\n\n\n}\n\nexport const change = credentialSet => {\n    const config = {\n        headers: { Authorization: `Bearer ${localStorage.getItem('jwt-token')}` }\n    };\n    return axios\n     \n        .post('/change-credentials', {\n            program: credentialSet.program,\n            username: credentialSet.username,\n            password: credentialSet.password,\n            index: credentialSet.index,\n            user_id: localStorage.getItem('id')\n            }, config)\n        .then(res => {\n\n            return res\n        })\n        .catch (err => {\n            console.log(err)\n        })\n}\n\n\n\n","import React, { Component } from 'react'\nimport { Button, FormGroup, FormLabel, FormControl} from \"react-bootstrap\"\nimport { register } from './UserFunctions'\nimport { Link } from 'react-router-dom'\nimport \"./Register.css\"\n\nclass RegisterForm extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: '',\n            masterkey:'',\n            masterkey_re:'',\n            msg: '',\n            errMsg: '',\n        }\n        this.onChange = this.onChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e){\n        this.setState({[e.target.name]: e.target.value})\n        this.setState({errMsg: ''})\n    }\n\n    validateForm() {\n        if (this.state.username.length > 0 && this.state.masterkey.length > 0 && this.state.masterkey_re.length > 0){ \n            return this.state.masterkey === this.state.masterkey_re\n        }          \n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n            username: this.state.username,\n            masterkey: this.state.masterkey\n        }\n        register(newUser).then(res => {\n            if(!res.data.err) {\n\n                this.props.history.push('/')\n            }\n            else{\n                console.log(res.data.err)\n                this.setState({errMsg: res.data.err})\n            }               \n        })\n    }\n\n    alertMessage(){\n        let msg = ''\n\n        if (this.state.errMsg !== ''){\n            msg = this.state.errMsg\n        } else if (this.state.username.length === 0){\n            msg = \"Enter your username\"\n        } else if (this.state.masterkey.length === 0){\n            msg = \"Enter your masterkey\"\n        } else if (this.state.masterkey_re.length === 0){\n            msg = \"Enter your masterkey again\"\n            \n        } else if (this.state.masterkey !== this.state.masterkey_re){\n            msg = \"Passwords has to match\"\n        } else {\n            msg = \"Good job! We are ready to register your account\"\n        }\n        return msg\n    }\n\n    render(){\n        return(\n            <div className=\"Register\">\n                <div className=\"title2\">\n                    <h1>REGISTER</h1>\n                </div>\n                <form noValidate onSubmit={this.onSubmit}>\n                    <FormGroup controlId=\"username\" bsSize=\"large\">\n                        <FormLabel>Username</FormLabel>\n                        <FormControl\n                            type=\"username\"\n                            name=\"username\"\n                            value={this.state.username}\n                            onChange={this.onChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"masterkey\" bsSize=\"large\">\n                        <FormLabel>Masterkey</FormLabel>\n                        <FormControl\n                            type=\"password\"\n                            name=\"masterkey\"\n                            value={this.state.masterkey}\n                            onChange={this.onChange}\n                        />\n                    </FormGroup>\n                    <FormGroup controlId=\"masterkey_re\" bsSize=\"large\">\n                        <FormLabel>Masterkey again</FormLabel>\n                        <FormControl\n                            type=\"password\"\n                            name=\"masterkey_re\"\n                            value={this.state.masterkey_re}\n                            onChange={this.onChange}\n                        />\n                    </FormGroup>\n                    <div className=\"button-group\">\n                        <Link to=\"/\">\n                            <Button className=\"login-btn\" block bsSize=\"large\">\n                                Login\n                            </Button>\n                        </Link>\n                        or\n                        <Button className=\"register-btn\" block bsSize=\"large\" disabled={!this.validateForm()} type=\"submit\">\n                            Register\n                        </Button>\n                    </div>\n                </form>\n                <div>\n                    <p className=\"alert-msg\">{this.alertMessage()}</p>\n                    \n                </div>\n            </div>\n        );\n    }\n\n}\nexport default RegisterForm;","import React, { Component } from 'react'\nimport { Button } from \"react-bootstrap\"\nimport { programs, credentials, remove, change, logout } from './UserFunctions'\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Cookie } from 'js-cookie'\n\nimport \"./Programs.css\"\n\nclass ProgramsList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            programList: [], //store initial list of programs and credentials\n            makeChanges: false, //true if user wants to change existing credentials \n            formState: {\n                alertMessage: '',\n                idx: '',\n                program: '', \n                username: '',\n                password:'',\n                password_re:'',\n                mode: \"submit\",\n            }\n        }\n        this.getToken = this.getToken.bind(this) //get token from local storage\n\n    }\n\n    resetFormState = () => {\n        this.setState({\n            formState:{\n                alertMessage: '',\n                program: '',\n                username: '',\n                password: '',\n                password_re: '',\n                mode: \"submit\",\n                idx: ''\n            }\n        })\n    }\n    \n    onChange = e => {\n        this.setState({\n            formState:{\n                ...this.state.formState,\n            \n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    onSubmit = e => {\n        const { programList, formState } = this.state\n        e.preventDefault()\n        const program = e.target.querySelector(\"input[name='program']\").value      \n        const username = e.target.querySelector(\"input[name='username']\").value      \n        const password = e.target.querySelector(\"input[name='password']\").value      \n        const password_re = e.target.querySelector(\"input[name='password_re']\").value\n        let index = 0\n        if(formState.mode === \"submit\"){\n            if(programList.length !== 0){\n                const len = this.state.programList.length\n                index = this.state.programList[len-1].idx +1\n\n            }\n            const credentialSet = {\n                program: program,\n                username: username,\n                password: password,\n                index: index\n            } \n            this.addCredentials(credentialSet)\n            this.setState({\n                programList: [\n                    ...this.state.programList,\n                    {\n                        program,\n                        username,\n                        password,\n                        password_re,\n                        updating: false,\n                        idx: index\n                    }\n                ]\n            })\n                \n\n        \n        } else if (formState.mode === \"edit\"){\n\n            var idx = programList.find((item) => item.idx === formState.idx).idx\n            index = programList.findIndex(p => p.idx === idx)\n\n            programList[index] = {\n                program,\n                username,\n                password,\n                updating: false,\n                idx:idx\n                //idx:programList[index].idx\n            }\n\n                        \n            const credentialSet = {\n                program: program,\n                username: username,\n                password: password,\n                index: programList[index].idx\n            } \n            this.addCredentials(credentialSet)\n            this.setState({\n                programList: [...programList]\n            })    \n        }\n    }\n\n    addCredentials(credentialSet){\n        const { formState } = this.state\n\n        if (formState.mode === 'submit'){\n            \n            credentials(credentialSet)\n            .then(res => {\n                this.authorizationCheck(res)\n                if(!res.err){\n                    this.resetFormState()\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        } else if (formState.mode === 'edit'){\n            change(credentialSet)\n            .then(res => {\n                this.authorizationCheck(res)\n                if(!res.err){\n                    this.resetFormState()\n                }\n            })\n            .catch(err => {\n                this.props.history.push('/')\n                console.log(err)\n            })\n        }\n    }\n\n    updateCredentials = key => {\n        \n        let { programList } = this.state\n\n        let credentials = programList.find((item) => {\n            return item.idx === key\n        })\n\n        credentials.updating = true\n        this.setState({\n            formState: { ...credentials, mode: \"edit\"},\n            programList\n        })\n        //programList[key].updating = true \n        //this.setState({\n        //    formState: { ...this.state.programList[key], mode: \"edit\"},\n        //    programList\n        //})\n    }\n\n    deleteCredentials = key => {\n\n        var programList = [...this.state.programList]\n        var removed = programList.splice(key, 1)\n\n        const removeProgram = {\n            program: removed[0].program,\n            username: removed[0].username,\n        }\n        remove(removeProgram).then(res => {\n            if(!res.err){\n                this.setState({\n                    programList: [...programList]\n                })\n            }\n        }).catch(err => {\n            this.props.history.push('/')\n        })\n\n    }\n   \n    getToken(){\n        return localStorage.getItem('jwt-token')\n    }\n\n    validateForm(formState){\n        if (formState.program.length > 0 && formState.username.length > 0 && formState.password.length > 0) {\n\n            return formState.password === formState.password_re\n        }\n        return false\n    }\n\n\n    componentDidMount() {\n        const token = this.getToken()\n        programs(token).then(res => {\n            this.authorizationCheck(res)      \n            if(!res.err) {\n                this.setState({\n                    programList: res.data.programs\n                })  \n            }\n        }).catch(error =>{\n            console.log(error.response.data)\n            this.props.history.push('/')        \n        })\n    }\n\n    logOut(responseData){\n        if (responseData){\n\n            Cookie.remove('token')\n            localStorage.removeItem('jwt-token')\n            return this.props.history.push({\n                pathname: '/',\n                state: responseData.data.msg\n            }) \n        }\n        else {\n            return this.props.history.push('/')\n            \n        }\n    }\n    \n\n    authorizationCheck = responseData => {\n        switch (responseData.status){\n            case 401: \n                return this.logOut(responseData)\n            case 500:\n                return this.logOut(responseData)\n            case 422:\n                return this.logOut(responseData)\n            default:\n                return {}\n        }\n        \n    }\n    \n    titleChange(){\n        let { formState } = this.state\n        let title = 'Add'\n\n        if (formState.mode === 'edit'){\n            title = 'Edit'\n        } \n        return title\n    }\n\n    alertMessage(){\n        \n        let { formState } = this.state\n\n        if (formState.program.length === 0){\n            return 'Enter application name'\n        } else if(formState.username.length === 0) {\n            return 'Enter your username for the application'\n        } else if(formState.password.length === 0){\n            return 'Enter your password for the application'\n        } else if(formState.password_re === ''){\n            if(formState.password_re.length === 0){\n                return 'Enter your password again'\n        } \n        } else if (formState.password !== formState.password_re){\n            return 'Passwords has to match'\n        } else if (formState.password.length < 8) {\n            return 'Recommended password length is 8 digits'\n        } else if (formState.mode === 'submit') {\n            return 'Good job! Now you can submit your credentials'\n        } else {\n            return \"Save your credentials by clicking 'edit'\"\n        }\n        \n        \n    }\n\n   \n    render(){\n        const { programList, formState } = this.state\n        return (\n\n            <div className=\"Programs\">\n                <div className=\"top-row\">\n\n                    <div className=\"logout\">\n                        <Button className=\"logout-btn\" onClick={() => this.logOut()}>\n                            Logout\n                        </Button>\n                    </div>\n                </div>\n                <h1 className=\"title\">KEYBANK</h1>\n                <div className=\"programtable\">\n                    <Table\n                        programList={programList}\n                        updateCredentials={this.updateCredentials}\n                        deleteCredentials={this.deleteCredentials}\n                    />\n                </div>\n                <div className=\"addform\">\n                    <h3 className=\"form-title\"> {this.titleChange()} credentials</h3>\n                    <Form\n                        formState={formState}\n                        onChange={this.onChange}\n                        onSubmit={this.onSubmit}\n                        validateForm={this.validateForm}\n                        resetFormState={this.resetFormState}\n                    />\n                    <p className=\"alert-msg\">{this.alertMessage()}</p>\n                </div>\n            </div>\n        )\n    }   \n}\nconst Table =({ programList=[], updateCredentials, deleteCredentials }) =>{\n    if (!programList.length > 0){\n        return <p>Start by adding new credentials</p>\n    }\n    return(\n        <table>\n            <tr>\n                <th>Application</th>\n                <th>Username</th>\n                <th>Password</th>\n                <th>Actions</th>\n            </tr>\n            \n            {programList.map((item) => {\n                \n                return (            \n                <tr>\n                    <td>\n                        <p>{item.program}</p>\n                    </td>\n                    <td>\n                        <p>{item.username}</p>\n                    </td>\n                    <td >\n                        <p>****</p>\n                    </td>\n                    <td className=\"btn-col\">\n                        <CopyToClipboard text={item.password} >\n                            <Button className=\"table-btn\">\n                                copy\n                            </Button>\n                        </CopyToClipboard>\n                        <Button className=\"table-btn\"  onClick={() => updateCredentials(item.idx)}>\n                            edit\n                        </Button>\n                        <Button className=\"table-btn\"  onClick={() => deleteCredentials(item.idx)}>\n                            del\n                        </Button>\n                    </td>\n                </tr>\n                )\n            })}\n    </table>\n    )\n}\n\nconst Field = ({label =\"\", name=\"\", value=\"\", type=\"\", onChange}) =>{\n        return(<div className=\"field-set\">\n            <label className=\"field-label\" htmlFor={name}>{label}</label>\n            <input className=\"field-input\" type={type} name={name} value={value} onChange={onChange}/>\n        </div>\n        )}\n\nconst Form = ({ formState, onChange, onSubmit, validateForm, resetFormState }) => {\n    \n\n    return (\n\n            <form className=\"form\" onSubmit={onSubmit}>\n                <fieldset>\n                    <Field \n                        name=\"program\"\n                        label=\"Application\"\n                        type=\"text\"\n                        value={formState.program}\n                        onChange={onChange}\n                    />\n                    <Field \n                        name=\"username\"\n                        label=\"Username\"\n                        type=\"text\"\n                        value={formState.username}\n                        onChange={onChange}\n                    />\n                    <Field \n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        value={formState.password}\n                        onChange={onChange}\n                    />\n                    <Field\n                        name=\"password_re\"\n                        label=\"Password again\"\n                        type=\"password\"\n                        value={formState.password_re}\n                        onChange={onChange}\n                    />\n                </fieldset>\n\n                <div className=\"button-group\">\n                    <Button className=\"form-btn\" type={formState.mode} disabled={!validateForm(formState)}>\n                        {formState.mode}\n                    </Button>\n                    <Button className=\"form-btn\" block bsSize=\"large\" onClick={() => resetFormState()}>\n                        clear\n                    </Button>\n                </div>\n            </form>\n\n    )      \n}\n    \nexport default ProgramsList","import React, { Component } from 'react'\nimport './App.css';\nimport { Route, HashRouter} from 'react-router-dom'\nimport Login  from './components/Login';\nimport Register  from './components/Register';\nimport Programs from './components/Programs';\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <div className=\"App\">\n                    <h3 style={{color: \"red\"}}>THIS APPLICATION IS FOR TESTING PURPOSES ONLY</h3>\n                    <h3 style={{color: \"red\"}}>DO NOT SUBMIT YOUR REAL CREDENTIALS</h3>\n                    <Route exact path=\"/\" component={Login}/>\n                    <Route path=\"/register\" component={Register}/>\n                    <Route path=\"/programs\" component={Programs}/>\n                    \n                </div>\n            </HashRouter>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}